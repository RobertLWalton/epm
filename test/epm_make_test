#! /bin/php
<?php

// File:	emp_make_test
// Author:	Robert L Walton <walton@acm.org>
// Date:	Tue Dec  3 01:38:38 EST 2019

$is_epm_test = true;

$epm_data = getcwd() . '/epm_make_test_data';
$epm_root = dirname ( getcwd() );
$_SESSION = [ 'userid' => 1, 'problem' => 'prob',
              'epm_root' => $epm_root,
	      'epm_data' => $epm_data ];
$_SERVER = [ 'DOCUMENT_ROOT' => dirname ( getcwd() ) ];

$prob_dir = 'users/user1/prob';
$proj_dir = 'projects/proj1/prob';

function setup_test_dirs ()
{
    global $epm_data, $prob_dir, $proj_dir;
    exec ( "rm -rf $epm_data" );
    mkdir ( "$epm_data/$prob_dir", 0750, true );
    mkdir ( "$epm_data/$proj_dir", 0750, true );
    mkdir ( "$epm_data/tmp", 0750, true );
        // Used for simulated upload.
}

$prob_java = <<<'EOT'
public class prob {
    public static void main ( String[] args )
    {
        System.out.println ( "Hello World!" );
    }
}
EOT;

$prob_c = <<<'EOT'
# include <stdio.h>
int main ()
{
    printf ( "Hello World!\n" );
    return 0;
}
EOT;

$prob_optn = <<<'EOT'
{
    "gcc-ped": "-Wpedantic",
    "filesize": "1000",
    "scoring-abs": 1e-5
}
EOT;

include ( '../page/include/epm_make.php' );

function check ( $expression, $value )
{
    eval ( "\$result = ($expression);" );
    if ( $result != $value )
    {
        $v1 = json_encode ( $result );
        $v2 = json_encode ( $value );
        echo "FAILED: $expression\n";
	echo "    $v1 != $v2\n";
    }
}

check ( '["A" => 0, "B" => 1]', ["B" => 1, "A" => 0] );

check ( 'template_match
              ( "tv", "tv.cc", "PPPP.cc" )',
	 ["PPPP" => "tv"] );
check ( 'template_match
              ( "tv", "00-001-tv.in",
	        "XXXX-YYYY-PPPP.in" )',
	 ["XXXX" => "00","YYYY" => "001",
	                 "PPPP" => "tv"] );
check ( 'template_match // tvxin, NOT tv.in
              ( "tv", "00-001-tvxin",
	        "XXXX-YYYY-PPPP.in" )',
	 false );

check ( 'substitute_match ( "XXXX-YYYY-PPPP.in",
           ["PPPP" => "tv", "XXXX" => "00",
	                    "YYYY" => "001"] )',
	 '00-001-tv.in' );
check ( 'substitute_match (
           ["X" => "XXXX/YYYY",
	    "O" => ["M" => "PPPP99", "N" => 88],
	    "Z" => "FOOBAT"],
           ["PPPP" => "tv", "XXXX" => "00",
	                    "YYYY" => "001"] )',
	 ["X" => "00/001",
	  "O" => ["M" => "tv99","N" => 88],
	  "Z" => "FOOBAT"] );

// Simulate upload steps for prob.c.
//
setup_test_dirs();

load_template_cache();
check ( '$GLOBALS["template_cache"]
                 ["PPPP.java:PPPP.class:"]
		 [0]', "$epm_root/template/" .
		       "PPPP.java:PPPP.class:.tmpl" );

$errors = [];
find_templates ( $problem, "$problem.c", NULL,
                 $templates, $errors );

check ( '$GLOBALS["errors"]', [] );
check ( '$GLOBALS["templates"][0][0]',
        "PPPP.c:PPPP:" );
check ( '$GLOBALS["templates"][0][2]' .
        '["LOCAL-REQUIRES"][0]', "prob.c" );
check ( '$GLOBALS["templates"][0][2]' .
        '["KEEP"][0]', "prob" );
check ( '$GLOBALS["templates"][0][2]' .
        '["SHOW"]', ["prob.err", "prob.out"] );

$errors = [];
get_template_optn ( $errors );
check ( '$GLOBALS["errors"]', [] );
check ( '$GLOBALS["template_optn"]["gcc-ped"]
                                  ["values"]',
        ["","-Wpedantic"] );
check ( '$GLOBALS["template_optn"]["scoring-rel"]
                                  ["range"]',
        [-1,2] );

file_put_contents
    ( "$epm_data/$prob_dir/prob.optn", $prob_optn );

$errors = [];
get_problem_optn ( $problem, $errors );
check ( '$GLOBALS["errors"]', [] );
check ( '$GLOBALS["problem_optn"]["gcc-ped"]',
        "-Wpedantic" );
check ( '$GLOBALS["problem_optn"]["filesize"]',
        1000 );
check ( '$GLOBALS["problem_optn"]["scoring-abs"]',
        1e-5 );

$errors = [];
$optn_map = compute_optn_map
    ( $problem, $template_optn, $problem_optn,
      $errors );
check ( '$GLOBALS["errors"]', [] );
check ( '$GLOBALS["optn_map"]["GCCFLAGS"]',
        "-Og -Wpedantic" );

$dirs = [ $prob_dir, $proj_dir ];

$errors = [];
find_requires_and_options
    ( $dirs, $templates, $requires, $options, $errors );
check ( '$GLOBALS["errors"]', [] );
check ( '$GLOBALS["requires"]', ["prob.c" => ""] );
check ( '$GLOBALS["options"]',
        ["PPPP.c:PPPP:.optn" => ""] );

$errors = [];
$control = find_control
    ( $dirs, 'prob.c', $templates, $requires, $options,
      $required, $option, $errors );
check ( '$GLOBALS["errors"]', [] );
check ( '$GLOBALS["required"]', [] );
check ( '$GLOBALS["option"]', [] );

$errors = [];
$work = "$prob_dir/+work+";
cleanup_working ( $work, $errors );
check ( '$GLOBALS["errors"]', [] );

$errors = [];
link_required ( "prob.c", $work, $required, $errors );
check ( '$GLOBALS["errors"]', [] );


$warnings = [];
$errors = [];
$commands = get_commands
    ( $control, $option, $warnings, $errors );
check ( '$GLOBALS["errors"]', [] );
check ( '$GLOBALS["warnings"]', [] );
check ( 'count ( $GLOBALS["commands"] )', 1 );

file_put_contents
    ( "$epm_data/$work/prob.c", $prob_c );

$errors = [];
$output = [];
run_commands ( $commands, $work, $output, $errors );
check ( '$GLOBALS["errors"]', [] );
check ( '$GLOBALS["output"]', [] );

$checks = $control[2]['CHECKS'];
$errors = [];
$output = [];
run_commands ( $checks, $work, $output, $errors );
check ( '$GLOBALS["errors"]', [] );
check ( '$GLOBALS["output"]', [] );

$errors = [];
move_keep ( $control, $work, $prob_dir,
            $moved, $errors );
check ( '$GLOBALS["errors"]', [] );
check ( '$GLOBALS["moved"]', ["prob"] );

$show = compute_show
    ( $control, $work, $prob_dir, $moved );
check ( '$GLOBALS["show"]',
        ["users/user1/prob/+work+/prob.err",
	 "users/user1/prob/+work+/prob.out"] );

exit;

// Simulate upload for prob.c.
//
setup_test_dirs();
file_put_contents ( "$epm_data/tmp/prob.c", $prob_c );

$errors = [];
$warnings = [];
$output = [];

$_FILES['uploaded_file'] =
    ['name' => 'prob.c',
     'error' => '0',
     'size' => '1000',
     'tmp_name' => "$epm_data/tmp/prob.c"];
process_upload ( $_FILES['uploaded_file'],
		 'prob',
		 $commands, $moved, $show,
		 $output, $warnings, $errors );
check ( '$GLOBALS["errors"]', [] );
check ( '$GLOBALS["warnings"]', [] );
check ( '$GLOBALS["output"]', [] );
check ( 'count ( $GLOBALS["commands"] )', 1 );
check ( '$GLOBALS["moved"]', ["prob", "prob.c"] );
check ( '$GLOBALS["show"]',
        ["users/user1/prob/+work+/prob.err",
	 "users/user1/prob/+work+/prob.out"] );


exit;

$errors = [];
find_templates ( $problem, "00-001-$problem.in",
                 "00-001-$problem.out",
                 $templates, $errors );
check ( 'count($GLOBALS["templates"]) > 0', true );
foreach ( $templates as $template )
{
    $tlist = explode ( ":", $template[0] );
    check ( '$GLOBALS["tlist"][0]', "XXXX-PPPP.in" );
    check ( '$GLOBALS["tlist"][1]', "XXXX-PPPP.out" );
    check ( '$GLOBALS["template"][2]["KEEP"][0]',
            "00-001-prob.out" );
    check ( '$GLOBALS["template"][2]["SHOW"]',
            ["00-001-prob.err", "00-001-prob.out"] );
    check ( '$GLOBALS["template"][2]' .
            '["OPTIONS"]["SSSS"]["cputime"]',
            ["-cputime 30", "LESS"] );
}
check ( '$GLOBALS["errors"]', [] );

$errors = [];
find_requires_and_options
    ( $dirs, $templates, $requires, $options, $errors );
check ( '$GLOBALS["errors"]', [] );
check ( '$GLOBALS["requires"]["prob.c"]',
        "users/user1/prob" );
check ( '$GLOBALS["options"]' .
        '["XXXX-PPPP.in:XXXX-PPPP.out:.optn"]',
        "" );
print_r ( $requires );

exit;

exec ( "rm -r $epm_data/$prob_dir/*" );


file_put_contents
    ( "$epm_data/$prob_dir/prob.java", $prob_java );

?>
