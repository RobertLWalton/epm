#! /bin/php
<?php

// File:	emp_make_test
// Author:	Robert L Walton <walton@acm.org>
// Date:	Sat Nov 23 19:20:43 EST 2019

$epm_data = getcwd() . '/epm_make_test_data';
$_SESSION = [ 'userid' => 1, 'problem' => 'prob' ];
$_SERVER = [ 'DOCUMENT_ROOT' => dirname ( getcwd() ) ];

$prob_dir = 'users/user1/prob';
$proj_dir = 'projects/proj1/prob';
exec ( "rm -rf $epm_data" );
mkdir ( "$epm_data/$prob_dir", 0750, true );
mkdir ( "$epm_data/$proj_dir", 0750, true );

$prob_java = <<<'EOT'
public class prob {
    public static void main ( String[] args )
    {
        System.out.println ( "Hello World!" );
    }
}
EOT;

$prob_c = <<<'EOT'
# include <stdio.h>
int main ()
{
    printf ( "Hello World!\n" );
    return 0;
}
EOT;

include ( '../src/include/epm_make.php' );

function check ( $expression, $value )
{
    $result;
    eval ( "\$result = ($expression);" );
    if ( $result != $value )
    {
        $v1 = json_encode ( $result );
        $v2 = json_encode ( $value );
        echo "FAILED: $expression\n";
	echo "    $v1 != $v2\n";
    }
}

check ( '["A" => 0, "B" => 1]', ["B" => 1, "A" => 0] );

check ( 'template_match
              ( "tv", "tv.cc", "PPPP.cc" )',
	 ["PPPP" => "tv"] );
check ( 'template_match
              ( "tv", "00-001-tv.in",
	        "XXXX-YYYY-PPPP.in" )',
	 ["XXXX" => "00","YYYY" => "001",
	                 "PPPP" => "tv"] );
check ( 'template_match // tvxin, NOT tv.in
              ( "tv", "00-001-tvxin",
	        "XXXX-YYYY-PPPP.in" )',
	 false );

check ( 'substitute_match ( "XXXX-YYYY-PPPP.in",
           ["PPPP" => "tv", "XXXX" => "00",
	                    "YYYY" => "001"] )',
	 '00-001-tv.in' );
check ( 'substitute_match (
           ["X" => "XXXX/YYYY",
	    "O" => ["M" => "PPPP99", "N" => 88],
	    "Z" => "FOOBAT"],
           ["PPPP" => "tv", "XXXX" => "00",
	                    "YYYY" => "001"] )',
	 ["X" => "00/001",
	  "O" => ["M" => "tv99","N" => 88],
	  "Z" => "FOOBAT"] );

$errors = [];
find_templates ( $problem, "$problem.c", NULL,
                 $templates, $errors );

check ( '$GLOBALS["templates"][0][0]',
        "PPPP.c:PPPP:" );
check ( '$GLOBALS["templates"][0][2]' .
        '["LOCAL-REQUIRES"][0]', "prob.c" );
check ( '$GLOBALS["templates"][0][2]' .
        '["KEEP"][0]', "prob" );
check ( '$GLOBALS["templates"][0][2]' .
        '["SHOW"]', ["prob.err", "prob.out"] );
check ( '$GLOBALS["errors"]', [] );

file_put_contents
    ( "$epm_data/$prob_dir/prob.c", $prob_c );

$dirs = [ $prob_dir, $proj_dir ];

$errors = [];
find_requires_and_options
    ( $dirs, $templates, $requires, $options, $errors );
check ( '$GLOBALS["errors"]', [] );
check ( '$GLOBALS["requires"]',
        ["prob.c" => "users/user1/prob"] );
check ( '$GLOBALS["options"]',
        ["PPPP.c:PPPP:.optn" => ""] );

$errors = [];
$control = find_control
    ( $dirs, $templates, $requires, $options,
      $required, $option, $errors );
check ( '$GLOBALS["errors"]', [] );
check ( '$GLOBALS["required"]', ["$prob_dir/prob.c"] );
check ( '$GLOBALS["option"]', [] );

$errors = [];
$work = "$prob_dir/+work+";
cleanup_working ( $work, $errors );
check ( '$GLOBALS["errors"]', [] );

$errors = [];
link_required ( NULL, $work, $required, $errors );
check ( '$GLOBALS["errors"]', [] );

$warnings = [];
$errors = [];
$commands = get_commands
    ( $control, $option, $warnings, $errors );
check ( '$GLOBALS["errors"]', [] );
check ( '$GLOBALS["warnings"]', [] );

$errors = [];
$output = [];
run_commands ( $commands, $work, $output, $errors );
check ( '$GLOBALS["errors"]', [] );
check ( '$GLOBALS["output"]', [] );

$checks = $control[2]['CHECKS'];
$errors = [];
$output = [];
run_commands ( $checks, $work, $output, $errors );
check ( '$GLOBALS["errors"]', [] );
check ( '$GLOBALS["output"]', [] );
exit;

$errors = [];
find_templates ( $problem, "00-001-$problem.in",
                 "00-001-$problem.out",
                 $templates, $errors );
check ( 'count($GLOBALS["templates"]) > 0', true );
foreach ( $templates as $template )
{
    $tlist = explode ( ":", $template[0] );
    check ( '$GLOBALS["tlist"][0]', "XXXX-PPPP.in" );
    check ( '$GLOBALS["tlist"][1]', "XXXX-PPPP.out" );
    check ( '$GLOBALS["template"][2]["KEEP"][0]',
            "00-001-prob.out" );
    check ( '$GLOBALS["template"][2]["SHOW"]',
            ["00-001-prob.err", "00-001-prob.out"] );
    check ( '$GLOBALS["template"][2]' .
            '["OPTIONS"]["SSSS"]["cputime"]',
            ["-cputime 30", "LESS"] );
}
check ( '$GLOBALS["errors"]', [] );

find_requires_and_options
    ( $dirs, $templates, $requires, $options, $errors );
check ( '$GLOBALS["errors"]', [] );
check ( '$GLOBALS["requires"]["prob.c"]',
        "users/user1/prob" );
check ( '$GLOBALS["options"]' .
        '["XXXX-PPPP.in:XXXX-PPPP.out:.optn"]',
        "" );
print_r ( $requires );

exit;

exec ( "rm -r $epm_data/$prob_dir/*" );


file_put_contents
    ( "$epm_data/$prob_dir/prob.java", $prob_java );

?>
