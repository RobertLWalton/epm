#! /bin/php
<?php

// File:	epm_run
// Author:	Robert L Walton <walton@acm.org>
// Date:	Mon Dec 23 18:22:46 EST 2019

$document = <<<'EOT'
EPM_ROOT=root-directory \
EPM_DATA=data-directory \
EPM_USERID=userid \
EPM_PROBLEM=problem \
EPM_WORK=working-subdirectory \
    epm_run [-r|-s] run-file [status-file]

With no options, just checks the run-file to see if
it can be run with -r: i.e., all the .in files listed
are local and have associated local .ftest files.  The
status-file must be omitted in this case.  The result
is in the standard output.

With options, executes the run defined by the run-file
in background.  With -r, local .in and .ftest files are
used, and it is an error if any do not exist locally, or
if the .run file is not local.

With -s only remote .in and .ftest files are used, and
it is an error if any do not exist remotely, or if the
.run file is not remote.  The background job writes its
current status to the status-file, and outputs its final
result in the standard output.

Many parameters are environment variables so they will
not be listed when the command is listed.  The working-
subdirectory is relative to the data-directory.  The
status-file is relative to the working-subdirectory.
The .run file is looked up on the local and remote
directories, and the .score's are computed using
templates that have no CONDITION for -r or have SUBMIT
CONDITION for -s.

EOT;

if ( $argc < 2 )
{
    echo $document;
    exit ( 0 );
}

$run = "c";
if ( preg_match ( '/^-(.)$/', $argv[1], $matches ) )
{
    $run = $matches[1];
    if ( ! preg_match ( '/[rs]/', $run ) )
    {
        echo "epm_run: bad option {$argv[1]}\n";
	exit (1);
    }
    array_shift ( $argv );
    -- $argc;
}
if ( $argc != ( $run == "c" ? 2 : 3 ) )
{
    echo "epm_run: wrong number of arguments\n";
    exit (1);
}

// Note: $_ENV does NOT work here because $ is not in
// ini variables_order.  But getenv does work.
//
$epm_root = getenv ( 'EPM_ROOT' );
$epm_data = getenv ( 'EPM_DATA' );
$userid   = getenv ( 'EPM_USERID' );
$problem  = getenv ( 'EPM_PROBLEM' );
$work     = getenv ( 'EPM_WORK' );
$rfile    = $argv[1];
if ( $argc > 2 )
    $sfile    = $argv[2];
else
    $sfile    = NULL;

$include = "$epm_root/include";

include "$include/epm_make.php";

load_template_cache();
load_file_caches ( "users/user$userid/$problem" );

$warnings = [];
$errors   = [];
load_argument_map
    ( $problem, false, $warnings, $errors );

var_dump ( $argument_map );
var_dump ( $warnings );
var_dump ( $errors );

?>
