#! /bin/php
<?php

// File:	epm_check
// Author:	Robert L Walton <walton@acm.org>
// Date:	Thu Jan 23 06:44:08 EST 2020

$document = <<<'EOT'
    epm_check [-s size] regexp file

Check that the file has size less than or equal to the
given size (default 1 megabyte) and that the complete
contents of the file matches the PHP regular expression
(which is NOT anchored).  If true, return exit code 0,
and if false, return exit code 1.

The regular expression should begin and end with a
boundary character, such as /.   Alternatively it can be
one of the following:

    EMPTY	Matches only empty files.
    SUCCESS	Matches only files that end with the
    		line 'D 0 DONE'.

EOT;

if ( $argc < 3 )
{
    echo $document;
    exit ( 0 );
}

$size = 1024*1024;
if ( $argc >= 3 && $argv[1] == '-s' )
{
    if ( preg_match ( '/^(\d+)(|k|m)$/',
	              $argv[2], $matches ) )
    {
        $size = intval ( $matches[1] );
	$u = $matches[2];
	if ( $u == 'k' ) $size = 1024 * $size * 1024;
	elseif ( $u == 'm' )
	    $size = 1024 * 1024 * $size;
	array_splice ( $argv, 1, 2 );
	$argc -= 2;
    }
    else
    {
	fprintf ( STDERR, "epm_check: could not" .
	                  " recognize %s\n", $argv[2] );
	exit ( 2 );
    }
}

if ( $argc != 3 )
{
    fprintf ( STDERR, "epm_check: wrong number of" .
                      " arguments\n" );
    exit ( 2 );
}

$fsize = @filesize ( $argv[2] );
if ( $fsize === false )
{
    fprintf ( STDERR, "epm_check: %s does not exist\n",
                      $argv[2] );
    exit ( 2 );
}
if ( $fsize > $size ) exit ( 1 );

$contents = @file_get_contents ( $argv[2] );
if ( $contents === false )
{
    fprintf ( STDERR, "epm_check: %s is not readable\n",
                      $argv[2] );
    exit ( 2 );
}

$regexp = $argv[1];
if ( $regexp == 'EMPTY' ) $regexp = '/^$/';
elseif ( $regexp == 'SUCCESS' )
    $regexp = '/(^|\n)D 0 DONE$/';

$match = @preg_match ( $regexp, $contents );
if ( $match === false )
{
    fprintf ( STDERR, "epm_check: %s is not a python" .
                      " regular expression;\n" .
		      "           try surrounding it" .
		      " with /'s\n",
                      $argv[1] );
    exit ( 2 );
}

exit ( 1 - $match );

?>
