#! /bin/php
<?php	// EPM Maintenance Program

// File:	epm
// Author:	Robert L Walton <walton@acm.org>
// Date:	Tue Jun 30 15:10:03 EDT 2020

// The authors have placed EPM (its files and the
// content of these files) in the public domain;
// they make no warranty and accept no liability
// for EPM.

$document = <<<'EOT'
epm print [webdirectory]

epm [-n] setup webdirectory
epm [-n] backup [webdirectory]

epm [-n] import project [problem]
epm [-n] import -projects
epm [-n] export project [problem]
epm [-n] export -projects

epm [-n] init project [problem]
epm [-n] init -projects

epm [-n] perms project [problem]
epm [-n] perms -projects
epm [-n] perms -admin
epm [-n] perms -lists
epm [-n] perms -all

epm [-n] *user* user [problem]
epm [-n] *user* -all

This program is intended to be run inside the $epm_data
directory tree unless webdirectory is specified.

If webdirectory is NOT specified, this program searches
the current directory and its ancestors for a directory
D containing the link +web+.  It then sets $epm_web to
the absolute name of the directory pointed at by +web+.

Next it sets $php_self to 'epm', loads

    $epm_web/parameters.php
    $epm_web/maintenance_parameters.php
    $epm_home/include/epm_maintenance.php

and executes the functions as indicated.  Actions taken
are described on the standard output.

The print commands merely prints important parameter
values.

The -n option indicates a dry run.  However, for import
and export, directories will be silently made even for
a dryrun.

See epm_maintenance.php for definitions of the
directories H, W, and D and how to use setup.  Setup
can also be used on an existing system to repair
missing parts and incorrect permissions.

See epm_maintenance.php for how to use backup.

The import and export functions employ rsync to copy
from/to $epm_library (in epm_maintenace.php).  Import
also does init and perms for the target directory.

The rest of the commands should not be needed, but
are available for cleaning up system problems.

The init command creates links or executables for the
$epm_specials files.

The perms commands set permissions and sets the group
of files and directories to $epm_web_group.  These
commands do not include the users directories.

The *user* commands do the same thing but for user
directories.  WARNING: they will likely disrupt any
executions or runs that are in progress.  Use them
very cautiously.

EOT;

function ERROR ( $message )
{
    fprintf ( STDERR, '%s',
              "ERROR: epm: $message" . PHP_EOL );
    exit ( 1 );
}

$dryrun = false;
if ( $argc >= 2 && $argv[1] == '-n' )
{
    $dryrun = true;
    array_shift ( $argv );
    -- $argc;
}

if ( $argc < 2 || preg_match ( '/^-doc/', $argv[1] ) )
{
    $fd = popen ( "less -F", 'w' );
    fwrite ( $fd, $document );
    pclose ( $fd );
    exit ( 0 );
}

$op = $argv[1];
if ( ! in_array ( $op, ['print', 'setup', 'backup',
                        'import', 'export',
                        'init', 'perms', '*user*'],
		       true ) )
    ERROR ( "cannot understand $op" );

// Return directory name with components equal to `.'
// and `..' removed (the latter removing the previous
// component).
//
function scrub_dir ( $dir )
{
    $parent = pathinfo ( $dir, PATHINFO_DIRNAME );
    $base = pathinfo ( $dir, PATHINFO_BASENAME );
    if ( $parent == $dir ) return $dir;
    $parent = scrub_dir ( $parent );

    if ( $base == '..' )
        return pathinfo ( $parent, PATHINFO_DIRNAME );
    elseif ( $base == '.' )
        return $parent;
    elseif ( $parent == '/' )
	return '/' . $base;
    else
	return $parent . '/' . $base;
}

if ( $op == 'print' && $argc >= 3 )
    $epm_web = $argv[2];
elseif ( $op == 'setup' )
{
    if ( $argc < 3 ) ERROR ( 'too few arguments' );
    if ( $argc > 3 ) ERROR ( 'too many arguments' );
    $epm_web = $argv[2];
}
elseif ( $op == 'backup' && $argc >= 3 )
{
    if ( $argc > 3 ) ERROR ( 'too many arguments' );
    $epm_web = $argv[2];
}
else
{
    $dir = getcwd();
    if ( $dir === false )
	ERROR ( "cannot get current working" .
	        " directory" );

    while ( true )
    {
	if ( is_dir ( "$dir/+web+" ) )
	    break;
	$parent = pathinfo ( $dir, PATHINFO_DIRNAME );
	if ( $parent == $dir )
	    ERROR ( "cannot find +web+" );
	$dir = $parent;
    }

    $epm_web = @readlink ( "$dir/+web+" );
    if ( $epm_web === false )
	ERROR ( "cannot read link $dir/+web+" );
    if ( $epm_web[0] != '/' )
	$epm_web = "$dir/$epm_web";
}

if ( $epm_web[0] != '/' )
    $epm_web = getcwd() . "/$epm_web";

if ( ! is_dir ( $epm_web ) )
    ERROR ( "\$epm_web = $epm_web is not a directory" );

$epm_self = 'bin/epm';
require "$epm_web/parameters.php";
require "$epm_web/maintenance_parameters.php";

$epm_web = scrub_dir ( $epm_web );
$epm_data = scrub_dir ( $epm_data );
$epm_home = scrub_dir ( $epm_home );
$epm_library = scrub_dir ( $epm_library );
$epm_backup = scrub_dir ( $epm_backup );

if ( isset ( $dir )
     &&
     scrub_dir ( $dir ) != $epm_data )
    ERROR
        ( '$epm_data defined in +web+/parameters.php' .
	  PHP_EOL .
          '    is not the ancestor of the current' .
	  ' working directory' .
	  PHP_EOL .
	  '    that contains +web+' );

require "$epm_home/include/epm_maintenance.php";

title ( "epm " .
        implode ( ' ', array_slice ( $argv, 1 ) ) );

if ( $op == 'print' )
{
    if ( $argc > 3 ) ERROR ( 'too many arguments' );
    echo ( '$epm_web = ' . $epm_web . PHP_EOL );
    echo ( '$epm_home = ' . $epm_home . PHP_EOL );
    echo ( '$epm_data = ' . $epm_data . PHP_EOL );
    echo ( '$epm_web_group = ' .
           $epm_web_group .  PHP_EOL );
    echo ( PHP_EOL );
    echo ( '$epm_library = ' . $epm_library . PHP_EOL );
    echo ( PHP_EOL );
    echo ( '$epm_backup = ' . $epm_backup . PHP_EOL );
    echo ( '$epm_backup_name = ' .
           $epm_backup_name .  PHP_EOL );
    echo ( '$epm_backup_round = ' .
           $epm_backup_round .  PHP_EOL );
}
elseif ( $op == 'setup' )
{
    setup ( $dryrun );
}
elseif ( $op == 'backup' )
{
    backup ( $dryrun );
}
elseif ( $op == 'export' )
{
    if ( $argc < 3 ) ERROR ( 'too few arguments' );
    if ( $argc > 4 ) ERROR ( 'too many arguments' );
    if ( $argc == 4 )
        export_problem ( $argv[2], $argv[3], $dryrun );
    elseif ( $argv[2] == '-projects' )
        export_projects ( $dryrun );
    else
        export_project ( $argv[2], $dryrun );
}
elseif ( $op == 'import' )
{
    if ( $argc < 3 ) ERROR ( 'too few arguments' );
    if ( $argc > 4 ) ERROR ( 'too many arguments' );
    if ( $argc == 4 )
    {
        import_problem ( $argv[2], $argv[3], $dryrun );
        init_problem ( $argv[2], $argv[3], $dryrun );
        set_perms_problem
	    ( $argv[2], $argv[3], $dryrun );
    }
    elseif ( $argv[2] == '-projects' )
    {
        import_projects ( $dryrun );
        init_projects ( $dryrun );
        set_perms_projects ( $dryrun );
    }
    else
    {
        import_project ( $argv[2], $dryrun );
        init_project ( $argv[2], $dryrun );
        set_perms_project ( $argv[2], $dryrun );
    }
}
elseif ( $op == 'init' )
{
    if ( $argc < 3 ) ERROR ( 'too few arguments' );
    if ( $argc > 4 ) ERROR ( 'too many arguments' );
    if ( $argc == 4 )
        init_problem ( $argv[2], $argv[3], $dryrun );
    elseif ( $argv[2] == '-projects' )
        init_projects ( $dryrun );
    else
        init_project ( $argv[2], $dryrun );
}
elseif ( $op == 'perms' )
{
    if ( $argc < 3 ) ERROR ( 'too few arguments' );
    if ( $argc > 4 ) ERROR ( 'too many arguments' );
    if ( $argc == 4 )
        set_perms_problem
	    ( $argv[2], $argv[3], $dryrun );
    elseif ( $argv[2] == '-admin' )
        set_perms_admin ( $dryrun );
    elseif ( $argv[2] == '-lists' )
        set_perms_lists ( $dryrun );
    elseif ( $argv[2] == '-all' )
        set_perms_all ( $dryrun );
    elseif ( $argv[2] == '-projects' )
        set_perms_projects ( $dryrun );
    else
        set_perms_project ( $argv[2], $dryrun );
}
elseif ( $op == '*user*' )
{
    if ( $argc < 3 ) ERROR ( 'too few arguments' );
    if ( $argc > 4 ) ERROR ( 'too many arguments' );
    if ( $argc == 4 )
        set_perms_user_problem
	    ( $argv[2], $argv[3], $dryrun );
    elseif ( $argv[2] == '-all' )
        set_perms_users ( $dryrun );
    else
        set_perms_user ( $argv[2], $dryrun );
}

done ();
exit ( 0 );

?>
