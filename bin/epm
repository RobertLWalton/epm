#! /bin/php
<?php	// EPM Maintenance Program

// File:	epm
// Author:	Robert L Walton <walton@acm.org>
// Date:	Sat Jun 20 13:59:22 EDT 2020

$document = <<<'EOT'
epm print [webdirectory]
epm [-n] init project [problem]
epm [-n] init -projects
epm [-n] init -admin
epm [-n] init -all
epm [-n] import [project [problem]]
epm [-n] export [project [problem]]
epm [-n] setup webdirectory

This program is intended to be run inside the $epm_data
directory tree.  It searches the current director and
its ancestors for a directory D containing the link
+web+.  It then sets $epm_web to the absolute name of
the directory pointed at, sets $php_self to 'epm', and
loads $epm_web/parameters.php.

This program then loads $epm_home/include/epm_maint.php
and executes the functions as indicated.

The -n option indicates a dry run.

EOT;

function ERROR ( $message )
{
    fprintf ( STDERR, '%s',
              "ERROR: epm: $message" . PHP_EOL );
    exit ( 1 );
}

if ( $argc < 2 || preg_match ( '/^-doc/', $argv[1] ) )
{
    echo $document;
    exit ( 0 );
}

$op = $argv[1];
if ( ! in_array ( $op, ['print','init','import',
                        'export','setup'], true ) )
    ERROR ( "cannot understand $op" );

$dryrun = false;
if ( $argc >= 2 && $argv[1] == '-n' )
{
    $dryrun = true;
    array_shift ( $argv );
    -- $argc;
}

function scrub_dir ( $dir )
{
    $parent = pathinfo ( $dir, PATHINFO_DIRNAME );
    $base = pathinfo ( $dir, PATHINFO_BASENAME );
    if ( $parent == $dir ) return $dir;
    $parent = scrub_dir ( $parent );

    if ( $base == '..' )
        return pathinfo ( $parent, PATHINFO_DIRNAME );
    elseif ( $base == '.' )
        return $parent;
    elseif ( $parent == '/' )
	return '/' . $base;
    else
	return $parent . '/' . $base;
}

if ( $op == 'print' && $argc >= 3 )
    $epm_web = $argv[2];
elseif ( $op == 'setup' )
{
    if ( $argc < 3 ) ERROR ( 'too few arguments' );
    if ( $argc > 3 ) ERROR ( 'too many arguments' );
    $epm_web = $argv[2];
}
else
{
    $dir = getcwd();
    if ( $dir === false )
	ERROR ( "cannot get current working" .
	        " directory" );

    while ( true )
    {
	if ( is_dir ( "$dir/+web+" ) )
	    break;
	$parent = pathinfo ( $dir, PATHINFO_DIRNAME );
	if ( $parent == $dir )
	    ERROR ( "cannot find +web+" );
	$dir = $parent;
    }

    $epm_web = @readlink ( "$dir/+web+" );
    if ( $epm_web === false )
	ERROR ( "cannot read link $dir/+web+" );
    if ( $epm_web[0] != '/' )
	$epm_web = "$dir/$epm_web";
}

$epm_self = 'epm';
require "$epm_web/parameters.php";
require "$epm_web/maintenance_parameters.php";

$epm_web = scrub_dir ( $epm_web );
$epm_data = scrub_dir ( $epm_data );
$epm_home = scrub_dir ( $epm_home );
$epm_library = scrub_dir ( $epm_library );

if ( isset ( $dir )
     &&
     scrub_dir ( $dir ) != $epm_data )
    ERROR
        ( '$epm_data defined in +web+/parameters.php' .
	  PHP_EOL .
          '    is not the ancestor of the current' .
	  ' working directory' .
	  PHP_EOL .
	  '    that contains +web+' );

require "$epm_home/include/epm_maint.php";

if ( $op == 'print' )
{
    if ( $argc > 3 ) ERROR ( 'too many arguments' );
    echo ( '$epm_web = ' . $epm_web . PHP_EOL );
    echo ( '$epm_home = ' . $epm_home . PHP_EOL );
    echo ( '$epm_data = ' . $epm_data . PHP_EOL );
    echo ( '$epm_library = ' . $epm_library . PHP_EOL );
}
elseif ( $op == 'init' )
{
    if ( $argc < 3 ) ERROR ( 'too few arguments' );
    if ( $argc > 4 ) ERROR ( 'too many arguments' );
    if ( $argc == 4 )
        init_problem ( $argv[2], $argv[3], $dryrun );
    elseif ( $argv[2] == '-admin' )
        init_admin ( $dryrun );
    elseif ( $argv[2] == '-all' )
        init_all ( $dryrun );
    elseif ( $argv[2] == '-projects' )
        init_projects ( $dryrun );
    else
        init_project ( $argv[2], $dryrun );
}
elseif ( $op == 'export' )
{
    if ( $argc < 3 ) ERROR ( 'too few arguments' );
    if ( $argc > 4 ) ERROR ( 'too many arguments' );
    if ( $argc == 4 )
        export_problem ( $argv[2], $argv[3], $dryrun );
    elseif ( $argv[2] == '-projects' )
        export_projects ( $dryrun );
    else
        export_project ( $argv[2], $dryrun );
}
elseif ( $op == 'import' )
{
    if ( $argc < 3 ) ERROR ( 'too few arguments' );
    if ( $argc > 4 ) ERROR ( 'too many arguments' );
    if ( $argc == 4 )
        import_problem ( $argv[2], $argv[3], $dryrun );
    elseif ( $argv[2] == '-projects' )
        import_projects ( $dryrun );
    else
        import_project ( $argv[2], $dryrun );
}


exit ( 0 );

?>

