#! /bin/php
<?php

// File:	epm_latex
// Author:	Robert L Walton <walton@acm.org>
// Date:	Thu Nov  5 19:17:09 EST 2020

// The authors have placed EPM (its files and the
// content of these files) in the public domain;
// they make no warranty and accept no liability
// for EPM.

$document = <<<'EOT'
    epm_latex PPPP

Executes

    pdflatex -record -no-shell-escape -interaction \
             nonstopmode -halt-on-error PPPP.tex \
	     >PPPP.tout 2>PPPP.terr

and scans PPPP.log file for errors, appending any found
to PPPP.terr.

If PPPP.log contains a line matching `Warning:.*Rerun',
the above command is re-run up to 3 times.

An error in PPPP.log begins with one of the following:

  (1) a line that has `!' as its first character
  (2) a line that has `at lines DD--DD' at its end,
      where DD denotes any sequence of digits
  (3) a line that contains `while \\output is active'
  (4) a line that begins with `l.<digit>+<whitespace>'
  (5) a line containing `Warning: Reference', but only
      if re-runs were done
      
An error ends with a blank line.

If there are errors, this program also outputs lines
that contain `[DD' followed by a non-digit or line
end, where DD is a sequence of digits and is normally
a page number.  Errors generally occur in a page whose
`[DD' line is either the first preceding or the first
following the error message.

Lines containing nothing but `[]' are suppressed.

This program returns the exit code of pdflatex as its
exit code and outputs an error message if this code
is non-zero and there are no errors in PPPP.log.

EOT;

if ( $argc < 2 || preg_match ( '/^-doc/', $argv[1] ) )
{
    echo $document;
    exit ( 0 );
}

$PPPP = $argv[1];
$LOG = "$PPPP.log";
$ERR = "$PPPP.terr";

$command = "pdflatex -record -no-shell-escape"
         . " -interaction nonstopmode"
	 . " -halt-on-error $PPPP.tex"
	 . " >$PPPP.tout 2>$PPPP.terr";

$runs = 0;

while ( $runs < 3 )
{
    ++ $runs;
    exec ( $command, $discard, $code );

    $c = @file_get_contents ( $LOG  );
    if ( $c === false )
    {
	file_put_contents
	    ( $ERR, "cannot read $LOG", FILE_APPEND );
	exit ( $code );
    }

    if ( ! preg_match ( '/Warning:.*Rerun/', $c ) )
        break;
}

$in_error = false;
$out = '';
$errors = 0;
foreach ( explode ( "\n", $c ) as $line )
{
    $line = rtrim ( $line );
    if ( ltrim ( $line ) == '[]' )
        continue;
    elseif ( $line == '' )
    {
        if ( $in_error )
	{
	    $in_error = false;
	    $out .= PHP_EOL;
	}
    }
    elseif ( ! $in_error && $line[0] == '!' )
    {
	$in_error = true;
	$out .= $line . PHP_EOL;
	++ $errors;
    }
    elseif ( ! $in_error
             &&
	     preg_match
	         ( '/at lines \d+\-\-\d+$/', $line ) )
    {
	$in_error = true;
	$out .= $line . PHP_EOL;
	++ $errors;
    }
    elseif ( ! $in_error
             &&
	     preg_match
	         ( '/while \\\\output is active/',
		   $line ) )
    {
	$in_error = true;
	$out .= $line . PHP_EOL;
	++ $errors;
    }
    elseif ( ! $in_error
             &&
	     preg_match
	         ( '/^l\.\d+\s/', $line ) )
    {
	$in_error = true;
	$out .= $line . PHP_EOL;
	++ $errors;
    }
    elseif ( ! $in_error
             &&
	     preg_match
	         ( '/Warning: Reference/', $line )
	    &&
	    $runs > 1 )
    {
	$in_error = true;
	$out .= $line . PHP_EOL;
	++ $errors;
    }
    elseif ( $in_error )
	$out .= $line . PHP_EOL;
    elseif ( preg_match ( '/\[(\d+)($|\D)/',
                          $line) )
	$out .= trim ( $line ) . PHP_EOL;
}

if ( $errors == 0 && $code != 0 )
    $out = "pdflatex returned $code but no errors found"
         . " in $LOG file" . PHP_EOL;

if ( $errors != 0 )
    file_put_contents ( $ERR, $out, FILE_APPEND );

exit ( $code );
  
?>
