<?php

    // File:	user_edit.php
    // Author:	Robert L Walton <walton@acm.org>
    // Date:	Sun Jan  5 13:16:15 EST 2020

    // Edits files:
    //
    //		admin/email_index/*
    //		admin/user{$uid}.info
    //
    // containing information about user.  Also
    // assigns $uid and creates
    //
    //		users/user$uid
    //	        admin/user$uid.info
    //
    // if $_SESSION['EPM_USER_ID'] not set.
    //
    // Does this by using a form to collect the follow-
    // ing information:
    //
    //	   full_name	Use's full name.
    //	   organization Use's organization.
    //     location     Town, state, country of
    //			organization.
    //
    // and allows emails to be added and emails other
    // than the login email to be deleted.

    require "{$_SERVER['DOCUMENT_ROOT']}/index.php";

    // require "$include/debug_info.php";

    $method = $_SERVER['REQUEST_METHOD'];
    if ( $method == 'GET' )
	$_SESSION['EPM_USER_EDIT_DATA'] = [
	    'uid' => -1,
	    'emails' => [],
	    'full_name' => '',
	    'organization' => '',
	    'location' => ''];
    elseif ( $method != 'POST' )
        exit ( "unacceptable method $method" )

    $data = & $_SESSION['EPM_USER_EDIT_DATA'];

    $uid = & $data['uid'];
    $emails = & $data['emails'];
    $full_name = & $data['full_name'];
    $organization = & $data['organization'];
    $location = & $data['location'];

    $email = $_SESSION['EPM_EMAIL'];
    $new_user =
        ( ! isset ( $_SESSION['EPM_USER_ID'] ) );

    if ( $method == 'GET' )
    {
        if ( ! $new_user )
	    $uid = $_SESSION['EPM_USER_ID'];

	// Set $emails to the emails in admin/email
	// that point at the current $uid and are NOT
	// equal to $email.  Set $max_uid to the maximum
	// user id seen amoung admin/email_index files.
	//
	$max_uid = 0;
	    // Set to NULL if cannot be computed.
	$d = "admin/email";
	$desc = opendir ( "$epm_data/$d" );
	if ( $desc === false )
	    ERROR ( "user_edit: cannot open $d" );

	while ( true )
	{
	    $value = readdir ( $desc );
	    if ( ! $value )
	    {
		closedir ( $desc );
		break;
	    }
	    if ( preg_match ( '/^\.\.*$/', $value ) )
		continue;
	    $f = "admin/email_index/$value";
	    $c = file_get_contents ( "$epm_data/$f" );
	    if ( $c === false )
	    {
		WARN ( "user_edit: cannot read $f" );
		$max_uid = NULL;
		continue;
	    }
	    $c = trim ( $c );
	    $item = explode ( ' ', $c );
	    if ( count ( $item ) >= 1
		 ||
		 ! preg_match
		       ( '/^[1-9][0-9]*$/', $item[0] ) )
	    {
		WARN ( "user_edit: bad value $c in $f" );
		$max_uid = NULL;
		continue;
	    }
	    if ( isset ( $max_uid ) )
		$max_uid = max ( $max_uid, $item[0] );
	    if ( $item[0] == $uid && $value != $email )
		$emails[] = $value;
	}
	if ( $new_user ) $uid = $max_uid + 1;
	sort ( $emails );

	$f = "admin/user{$uid}.info";
	$c = file_get_contents ( "$epm_data/$f" );
	if ( $c === false )
	    ERROR ( "cannot read readable $f" );
	$c = preg_replace
	         ( '#(\R|^)\h*//.*#', '', $c );
	    // Get rid of `//...' comments.
	$user_admin = json_decode ( $c, true );
	if ( $user_admin === NULL )
	{
	    $m = json_last_error_msg();
	    ERROR ( "cannot decode json in $f:\n" .
	            "    $m" );
	}
	foreach ( ['full_name',
	           'organization',
		   'location'] as $key )
	    $data['key'] = $user_admin[$key];
	if ( $emails != $user_admin['emails'] )
	    WARN ( "mismatch between $f emails" .
	           " and admin/email/ emails" );
    }
    $num_emails = max ( $epm_max_emails,
                        1 + count ( $emails ) );


    // Error messages and indicators for POSTs.
    //
    $errors = [];  // List of post error messages.
    $field_missing = false;
       // Set if form field missing from post.
       // An error message is also put in $errors.

    // Sanitize non-email form entries.  If error, add
    // to $errors and return ''.  Otherwise return
    // value.
    //
    // $name is as in $_POST[$name], $form_name is as in
    // text of form, $min_length is min UNICODE charac-
    // ters in value.
    //
    function sanitize
        ( $name, $form_name, $min_length )
    {
        global $errors, $field_missing;

        if ( ! isset ( $_POST[$name] ) )
	{
	    $field_missing = true;
	    $errors[] = "must set $form_name";
	    return '';
	}
	$value = trim ( $_POST[$name] );
	if ( $value == '' )
	{
	    $field_missing = true;
	    $errors[] = "must set $form_name";
	    return '';
	}
	if (   strlen ( utf8_decode ( $value ) )
	     < $min_length )
	     // Note, grapheme_strlen is not available
	     // because we do not assume intl extension.
	{
	    $errors[] =
	        "$form_name is too short; re-enter";
	    return '';
	}
	return $value;
    }

    // Check that $value can be legally added as an
    // email.  Return '' if its not legal OR if its
    // empty.  Otherwise return $value.
    //
    function sanitize_email ( $value )
    {
        global $errors;

	$value =  trim ( $value );
	if ( $value == "" )
	    return '';
	$svalue = filter_var
	    ( $value, FILTER_SANITIZE_EMAIL );
	if ( $value != $svalue )
	{
	    $errors[] =
	        "Email $value contains characters" .
		" illegal in an email address";
	    return '';
	}
	if ( ! filter_var
		  ( $value,
		    FILTER_VALIDATE_EMAIL ) )
	{
	    $errors[] =
	        "Email $value is not a valid email" .
		" address";
	    return '';
	}
	return $value;
    }
	
    $method = $_SERVER['REQUEST_METHOD'];
   
    if ( $method == 'GET' )
    {
	// Do nothing.  Get info from user.
    }

    elseif ( $method != 'POST' )
        exit ( 'UNACCEPTABLE HTTP METHOD ' . $method );

    elseif ( isset ( $_POST['new_email'] ) )
    {
    	$e = sanitize_email ( $_POST['new_email'] );
	if ( $e != '' )
	{
	    $f = "admin/email_index/$e";
	    if ( is_readable ( "$epm_data/$f" ) )
	    {
	        $errors[] =
		    "email address $e is already" .
		    " assigned to some user" .
		    " (maybe you)";
	    }
	    else
	    {
		$item = [ $uid,
		          $_SESSION['EPM_SESSION_TIME'],
			  1];
	        $r = file_put_contents
		         ( "$epm_data/$f",
			   implode ( ' ', $item ) );
		if ( $r === false )
		    ERROR ( "could not write $f" );
		$emails[] = $e;
	    }
	}
    }
    elseif ( isset ( $_POST['delete_email'] ) )
    {
	if ( ! isset ( $uid ) )
	    exit ( 'UNACCEPTABLE HTTP POST' );
    	$e = sanitize_email ( $_POST['delete_email'] );
	if ( $e != '' )
        {
	    $f = "admin/email_index/$e";
	    $k = array_search ( $e, $emails, true );
	    if ( $e == $email )
	    {
	        $errors[] =
		    "trying to delete email address" .
		    "$e that you used to log in";
	    }
	    elseif ( $k === false )
	    {
	        $he = htmlspecialchars ( $e );
	        $errors[] =
		    "trying to delete email address" .
		    "$e that is NOT assigned to your";
	    }
	    elseif ( ! unlink ( "$epm_data/$f" ) )
	    {
	        $sysfail = "cannot unlink $f";
		require "$include/sysalert.php";
	    }
	    else
		array_splice ( $emails, $k, 1 );
	}
    }
    elseif ( isset ( $_POST['update'] ) )
    {
	// Read and check all the form data.
	// Skip emails that are to be deleted.
	// List of emails other than $email is
	// put in $user_emails.
	//
	$full_name = sanitize
	    ( 'full_name', 'Full Name', 5 );
	$organization = sanitize
	    ( 'organization', 'Organization', 3 );
	$location = sanitize
	    ( 'location', 'Location', 6 );

	if ( $field_missing )
	    exit ( 'UNKNOWN HTTP POST' );
    }
    else
	exit ( 'UNACCEPTABLE HTTP POST' );

    if ( $method == 'POST' && isset ( $_POST['update'] )
                           && count ( $errors ) == 0 )
    {
        // We are done; copy data to files.
	//
	if ( $new_user )
	{
	    if ( ! isset ( $max_uid ) )
	    {
	        $sysfail =
		    "could not compute new uid" .
		    " because of previous errors";
		require "$include/sysalert.php";
	    }
	    $uid = $max_uid + 1;
	    umask ( 06 );
	    while ( ! mkdir ( $epm_data .
	                      "/users/user$uid",
	                      0771 ) )
	        ++ $uid;
	    umask ( 07 );
	    $_SESSION['epm_uid'] = $uid;
	    $f = "admin/email_index/$email";
	    $r = file_put_contents
	             ( "$epm_data/$f", $uid );
	    if ( $r === false )
	    {
		$sysfail = "could not write $f";
		require "$include/sysalert.php";
	    }
	}


	$user_admin['full_name'] = $full_name;
	$user_admin['organization'] = $organization;
	$user_admin['location'] = $location;
	$j = json_encode ( $user_admin,
	                   JSON_PRETTY_PRINT );
	$f = "admin/user{$uid}.info";
	$r = file_put_contents ( "$epm_data/$f", $j );
	if ( $r === false )
	{
	    $sysfail = "could not write $f";
	    require "$include/sysalert.php";
	}

	if ( $_POST['update'] == 'Done' )
	{
	    header ( "Location: user.php?done=yes" );
	    exit;
	}
    }

?>

<html>
<body>

<?php 

    if ( count ( $errors ) > 0 )
    {
        echo '<h3>Errors:</h3>' . "\n";
	echo "<div style='margin-left:20px'>\n";
	foreach ( $errors as $value )
	{
	    $hvalue = htmlspecialchars ( $value );
	    echo "<mark>$hvalue<\mark><br>\n";
	}
	echo '</div>' . "\n";
    }

    if (    count ( $emails ) == 0
         && isset ( $uid )
         && count ( $errors ) == 0 )
        echo "<mark>Its a good idea to add a second" .
	     " email address.</mark><br>\n";

    echo "<h3>Edit User Profile:</h3>\n";

    echo "<b>Email Addresses:</b>\n";
    echo "<div style='margin-left:20px'>\n";
    $hemail = htmlspecialchars ( $email );
    echo "$hemail&nbsp;&nbsp;&nbsp;&nbsp;" .
         "(used for this login)<br>\n";
    foreach ( $emails as $e )
    {
	$h = htmlspecialchars ( $e );
	echo "<form style='display:inline'".
	     " method='POST'" .
	     " action='user_edit.php'>\n" .
	     "$h&nbsp;&nbsp;&nbsp;&nbsp;" .
	     "<button type='submit'" .
	     " name='delete_email'" .
	     " value='$h'>Delete</button><br>\n" .
	     "</form>\n";
    }
    if ( isset ( $uid )
         &&
	 count ( $emails ) + 1 < $num_emails )
	echo "<form style='display:inline'".
	     " method='POST'" .
	     " action='user_edit.php'>\n" .
	     "<input type='email' name='new_email'" .
	     " value='' size='40' placeholder=" .
	     "'Another Email Address'>" .
	     "&nbsp;&nbsp;&nbsp;&nbsp;" .
	     "<input type='submit' name='add_email'" .
	     " value='Add'><br>\n" .
	     "</form>\n";

    if ( isset ( $uid ) && count ( $errors ) == 0 )
        $update = 'Done';
    else
        $update = 'Update';

    echo "</div>\n";

    $location_placeholder =
	 "Town, State and Country of Organization";
    $hfull_name = htmlspecialchars ( $full_name );
    $horganization = htmlspecialchars ( $organization );
    $hlocation = htmlspecialchars ( $location );
    echo <<<EOT
    <form  method='POST' action='user_edit.php'>
    <table>
    <tr><td><b>Full Name:</b></td>
        <td> <input type='text' size='40'
              name='full_name'
              value='$hfull_name'
	      placeholder='John Doe'></td></tr>
    <tr><td><b>Organization:</b></td><td>
        <input type='text' size='40'
	 name='organization' value='$horganization'
	 placeholder='University, Company, or Self'>
	 </td></tr>
    <tr><td><b>Location:</b></td><td>
        <input type='text' size='40'
	 name='location' value='$hlocation'
	 placeholder='$location_placeholder'>
	 </td></tr>
    <tr><td>
        <input type='submit' name='update'
	       value='$update'></td></tr>
    </table></form>
EOT;
?>

</body>
</html>
