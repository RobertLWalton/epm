<?php

    // File:	login.php
    // Author:	Robert L Walton <walton@acm.org>
    // Date:	Wed Jan  1 18:25:38 EST 2020

    // Handles login for a session.
    //
    // Data:
    //
    //    ADMIN	    Administration directory,
    //              $epm_data/admin
    //
    //    EMAIL	    User email address.  Used as the
    //              user name.
    //
    //    UID	    User ID.  A non-zero natural number.
    //		    Value of admin/email/EMAIL if that
    //		    file exists, which it does unless
    //		    the user is a new user, in which
    //		    case UID does not exist during
    //		    login.
    //
    //    BID	    Browser ID.  A 32-hex-digit random
    //		    number generated by the server to
    //		    identify the browser, and stored
    //		    in the browser local memory.
    //
    //    KEYA	    Two encryption Keys.  32-hex-digit
    //	  KEYB      random numbers generated by the
    //		    server for use in a handshake
    //		    protocol that certifies browser
    //		    identity.  Stored in browser local
    //		    memory.
    //
    //	  CNUM	    Confirmation Number.  32-hex-digit
    //		    random number generated by the
    //		    server and emailed to the user, who
    //		    enters it into the browser during
    //		    the protocol that creates the
    //		    broswer local memory ITEM.  Only
    //		    exists if browser identification
    //		    protocol is MANUAL, and not AUTO.
    //
    //     LTIME    Login Time.  Time server receives
    //		    first browser identification
    // 		    protocal POST.  Stored in
    //              '%FT%T%z' (ISO 8601) format.
    //
    //     CTIME    Confirmation Time.  Copy of LTIME
    //		    for the last successful MANUAL
    //		    browser identification protocol.
    //
    //     BID-FILE The file admin/browser/BID that
    //		    contains just the line:
    //
    //			EMAIL KEYA KEYB CTIME
    //
    //		    File is written by server when it
    //		    successfully completes the MANUAL
    //		    browser identification protocol that
    //		    uses a confirmation number (CNUM).
    //
    //	   ITEM     Browser Local Memory Item, stored
    //		    using EMAIL as the item key when
    //		    the browser is notified that the
    //              MANUAL browser id protocol has been
    //              successfully completed.  Just the
    //              single line:
    //
    //			BID KEYA KEYB CTIME
    //		    in the browser local memory.
    //		
    //
    // When the browser identification protocol
    // successfully complete, the server sets the
    // the following values in $_SESSION:
    //
    //    EPM_EMAIL => EMAIL
    //    EPM_BROWSER_ID => BID
    //    EPM_LOGIN_TIME => LTIME
    //    EPM_USER_ID => UID, but not set for new user.
    //
    // Next page is page/problem_select.php if user is
    // NOT new and page/user_edit.php otherwise.  In
    // the case of a new user, this last page determines
    // UID and sets EPM_USER_ID.
    //
    // During the execution of the browser identifica-
    // tion protocol, $_SESSION['EPM_BROWSER_DATA']
    // is used to hold BID, EMAIL, LTIME, CTIME, KEYA,
    // KEYB, and CNUM.  During the protocal the browser
    // stores BID, EMAIL, CTIME, KEYA, KEYB, and CNUM
    // in var's of the same name.
    //
    // Each execution of the browser identification
    // protocol is logged separately to the file:
    //
    //		admin/login.log
    //
    // if that file exists and is writeable. The file
    // format is
    //
    //	   * comment
    //     BID EMAIL UID IPADDR LTIME CTIME
    //
    // where IPADDR is $_SESSION['EPM_IPADDR'] and UID
    // is `NEW' for a new user.


    // Browser Identification Protocol
    // -------------------------------
    //
    // The browser runs the protocol using javascript
    // XMLHttpRequest to POST requests.  When the
    // browser is notified of success, it is given
    // a page to go to (page/problem_select.php or
    // for new users page/user_edit.php).
    //
    // The protocol is:
    //
    // BEGIN:
    //	   * AUTO_RETRY = 0
    //     * Get EMAIL from user.
    //	   * Get ITEM = localStorage.getItem(EMAIL)
    //	   * If ITEM != null:
    //		* Parse ITEM to get BID, KEYA, KEYB
    //          * MANUAL = no
    //          * go to AUTO_ID
    // MANUAL_ID:
    //	   * MANUAL = yes
    //     * Send 'op=MANUAL&value=EMAIL'
    //     * Receive 'NEW BID EKEYA EKEYB CTIME' where
    //       EKEYA, EKEYB are KEYA, KEYB encrypted using
    //       CNUM.
    // EXPIRED:
    //     * Get CNUM from user.
    //     * Decrypt EKEYA and EKEYB using CNUM to get
    //	     KEYA, KEYB.
    // AUTO_ID:
    //     * AUTO_RETRY += 1
    //     * If AUTO_RETRY > 2:
    //		* tell user about failure
    //          * ask if user want to:
    //              RE-ENTER EMAIL:
    //			* go to BEGIN
    //              GET NEW CNUM:
    //		        * localStorage.removeItem(EMAIL)
    //                  * go to BEGIN
    //     * Send 'op=AUTO&value=BID'
    //	   * Receive one of:
    //           'EXPIRED BIT EKEYA EKEYB CTIME':
    //               go to EXPIRED
    //           'FAILED':  (means BID not recognized)
    //               go to AUTO_ID
    //		 'SHAKE HANDSHAKE':
    //               continue with following
    //     * Decrypt HANDSHAKE using KEYA and encrypt
    //       result using KEYB to get SHAKEHAND.
    //     * Send 'op=SHAKE&value=SHAKEHAND'
    //     * Receive one of:
    //           'FAILED':
    //               go to AUTO_ID
    //           'DONE NEXT_PAGE':
    //               continue with following
    //     * If MANUAL:
    //		* ITEM = 'BID KEYA KEYB CTIME'
    //          * localStorage.setItem(EMAIL,ITEM)
    //     * Issue GET to NEXT_PAGE
    //
    // The server generates bid, keyA, keyB, confirma-
    // tion number and handshake as 128-bit binary
    // strings.  Encrypted values are binary strings.
    // Binary strings are transmitted as hexadecimal
    // strings.  Ctime is the time that the browser was
    // last confirmed, or the time the server receives
    // the MANUAL post, and is in '%FT%T%z' (ISO 8601)
    // format.  The browser does not use it in the
    // protocol.
    //
    // Encryption is by AES-128-CRC with zero initial
    // vector.  All encrypted items are 128 bit random
    // numbers.
    //
    // Multiple invocations of MANUAL for the same
    // session with the same EMAIL will use the same
    // cnumber, so as not to confuse the user.

    require "{$_SERVER['DOCUMENT_ROOT']}/index.php";
    umask ( 07 );

    // require "$include/debug_info.php";


TBD

    // Data set by GET and POST requests.
    //
    $method = $_SERVER["REQUEST_METHOD"];
    $email = NULL;
        // User must be asked for an email address iff
	// this remains NULL.
    if ( isset ( $_SESSION['epm_email'] ) )
        $email = $_SESSION['epm_email'];
    $bad_email = NULL;
        // If this becomes non-NULL, it is a user given
	// email address that is rejected.
    $confirmation_time = NULL;
        // User must be asked for confirmation number,
	// or must be auto-confirmed, if this remains
	// NULL and email is not NULL.  This must be
	// NULL if email is NULL.
    if ( isset ( $_SESSION['epm_confirmation_time'] ) )
        $confirmation_time =
	    $_SESSION['epm_confirmation_time'];
    $bad_confirm = false;
        // If this becomes true, confirmation number
	// given by the user was invalid, and new number
	// must be asked for.
    $userid = NULL;
        // This is set when userid is found using email
	// address.  For new users, it is never set
	// (it will be set by user_edit.php).
	// This must be NULL if $email is NULL.
	//
	// NOTE: setting this does NOT set $_SESSION
	// ['epm_userid'], which is not set until
	// after confirmation.
    if ( isset ( $_SESSION['epm_userid'] ) )
        $userid = $_SESSION['epm_userid'];
    $user_admin = NULL;
        // User admin parameters if they exist.
	// Is NULL if $userid is NULL.

    // Set userid and $user_admin according to $email.
    // Does nothing for new user.  
    //
    function set_userid()
    {
        global $email, $epm_data, $userid, $user_admin,
	       $include;

	$f = "admin/email_index/$email";
	if ( is_readable ( "$epm_data/$f" ) )
	{
	    $u = file_get_contents ( "$epm_data/$f" );
	    $u = trim ( $u );
	        // In case $f was edited by hand and a
		// \n was introduced.
	    if ( ! preg_match
		      ( '/^[1-9][0-9]*$/', $u ) )
	    {
		$sysfail = "$f has value $u";
		require "$include/sysalert.php";
	    }
	    $userid = $u;
	    $f = "admin/user{$userid}.info";
	    if ( is_readable ( "$epm_data/$f" ) )
		$user_admin =
		    get_json ( $epm_data, $f );
	}
    }

    // Log confirmation attempt or auto-confirmation.
    //
    function log_confirmation()
    {
    	global $confirmation_time, $email, $epm_data,
	       $include;

	$date_format = "%FT%T%z";

	$f = "admin/login.log";
	if ( is_writable ( "$epm_data/$f" ) )
	{
	    $desc = fopen ( "$epm_data/$f", 'a' );
	    if ( $desc === false )
	    {
		$sysfail =
		    "cannot append to writable $f";
		require "$include/sysalert.php";
	    }
	    $ipaddr = $_SESSION['epm_ipaddr'];
	    $log_login_time =
		strftime ( $date_format,
			   $_SESSION
			     ['epm_login_time'] );
	    if ( isset ( $confirmation_time ) )
		$log_confirmation_time = strftime
		    ( $date_format,
		      $confirmation_time );
	    else
		$log_confirmation_time = 'FAILED';
	    fputcsv
		( $desc,
		  [ $email,
		    $ipaddr,
		    $log_login_time,
		    $log_confirmation_time ] );
	    fclose ( $desc );
	}
    }

    if ( $method == 'GET' )
    {
        // Users is trying to initiate or continue
	// login.
	//
	if ( isset ( $userid ) )
	{
	    header ( "Location: problem.php" );
	    exit;
	}
	elseif ( isset ( $confirmation_time ) )
	{
	    header ( "Location: user_edit.php" );
	    exit;
	}
	// else fall through to continue login.
    }

    elseif ( $method != 'POST' )
        exit ( 'UNACCEPTABLE HTTP METHOD ' . $method );

    elseif ( isset ( $confirmation_time ) )
        exit ( 'UNACCEPTABLE HTTP POST' );

    elseif ( isset ( $userid ) )
        exit ( 'UNACCEPTABLE HTTP POST' );

    elseif ( isset ( $_POST['email'] ) )
    {
	// User answer to request for email address.
	// May be request to change email.

	$new_email = trim ( $_POST['email'] );
	$e = filter_var
	    ( $new_email, FILTER_SANITIZE_EMAIL );

	if ( $new_email == "" ) /* Do nothing */;
	    // "" sent by by user typing just
	    // carriage return.
	else if ( $e != $new_email )
	    $bad_email = $new_email;
	else if ( ! filter_var
		      ( $new_email,
			FILTER_VALIDATE_EMAIL ) )
	    $bad_email = $new_email;
	else
	{
	    $email = $e;
	    $_SESSION['epm_email'] = $email;
	    $userid = NULL;
	    $user_admin = NULL;
	    set_userid();
	}
    }
    else if ( isset ( $_POST['confirm_tag'] ) )
    {
	if ( ! isset ( $email ) )
	    exit ( 'UNACCEPTABLE HTTP POST' );
	elseif (    $_SESSION['confirm_tag']
		  == $_POST['confirm_tag'] )
	{
	    $confirmation_time = time();
	    $_SESSION['epm_confirmation_time'] =
		$confirmation_time;
	}
	else
	    $bad_confirm = true;

	log_confirmation();
    }

    if (    isset ( $confirmation_time )
         && isset ( $user_admin ) )
    {
        // Record current time as last confirmation
	// time for the user and ip address.
	//
	$ipaddr = $_SESSION['epm_ipaddr'];
	$user_admin['confirmation_time'][$ipaddr] =
	    strftime ( '%FT%T%z', $confirmation_time );
	$j = json_encode
	    ( $user_admin, JSON_PRETTY_PRINT );
	$f = "admin/user{$userid}.info";
	$r = file_put_contents ( "$epm_data/$f", $j );
	if ( $r === false )
	{
	    $sysfail = "cannot write $f";
	    require "$include/sysalert.php";
	}
    }

    // This must be done after recording confirmation_
    // time as it may set $confirmation_time to an old
    // value.
    //
    if (    ! isset ( $confirmation_time )
         && isset ( $user_admin ) )
    {
	// Check if we can auto-confirm for this
	// user and ip address.
	//
	$ipaddr = $_SESSION['epm_ipaddr'];
	if ( isset ( $user_admin['confirmation_time']
	                        [$ipaddr] ) )
	{
	    $ctime = strtotime
		( $user_admin['confirmation_time']
		             [$ipaddr] );
	    if (   time()
	         < $ctime + $confirmation_interval )
	    {
	        $confirmation_time = $ctime;
		$_SESSION['epm_confirmation_time'] =
		    $confirmation_time;
		log_confirmation();
	    }
	}
    }

    if ( isset ( $confirmation_time ) )
    {
	if ( ! isset ( $userid ) )
	    header ( "Location: user_edit.php" );
	else
	{
	    if ( isset ( $userid ) )
	        $_SESSION['epm_userid'] = $userid;
	    header ( "Location: problem.php" );
	}
	exit;
    }
    else if ( isset ( $email ) )
	$_SESSION['confirm_tag'] =
	    bin2hex ( random_bytes ( 8 ) );

?>

<html>
<head>
<script>
var xhttp = new XMLHttpRequest();

var AUTO_RETRY, EMAIL, ITEM, BID, KEYA, KEYB, CTIME,
    MANUAL, CNUM;

function get_email ()
{
}

BEGIN: while ( true ) {
    var AUTO_RETRY = 0;
    var EMAIL = null;
    var ITEM = null;
xhttp.onreadystatechange = function()
{
    if (    this.readyState === XMLHttpRequest.DONE
	 && this.status == 200 )
    {
	var r = this.responseText.split ( " " );
	document.getElementById("oldtime")
	        .innerHTML = r[0];
	document.getElementById("newtime")
	        .innerHTML = r[1];
	send_time ( r[1] );
    }
};

function send_time ( time )
{
    xhttp.open ( 'POST', "clock.php", true );
    xhttp.setRequestHeader
        ( "Content-Type",
	  "application/x-www-form-urlencoded" );
    xhttp.send ( "time=" + time );
}

BEGIN:
    var AUTO_RETRY = 0
    //     * Get EMAIL from user.
    //	   * Get ITEM = localStorage.getItem(EMAIL)
    //	   * If ITEM != null:
    //		* Parse ITEM to get BID, KEYA, KEYB
    //          * MANUAL = no
    //          * go to AUTO_ID
    // MANUAL_ID:
    //	   * MANUAL = yes
    //     * Send 'op=MANUAL&value=EMAIL'
    //     * Receive 'NEW BID EKEYA EKEYB CTIME' where
    //       EKEYA, EKEYB are KEYA, KEYB encrypted using
    //       CNUM.
    // EXPIRED:
    //     * Get CNUM from user.
    //     * Decrypt EKEYA and EKEYB using CNUM to get
    //	     KEYA, KEYB.
    // AUTO_ID:
    //     * AUTO_RETRY += 1
    //     * If AUTO_RETRY > 2:
    //		* tell user about failure
    //          * ask if user want to:
    //              RE-ENTER EMAIL:
    //			* go to BEGIN
    //              GET NEW CNUM:
    //		        * localStorage.removeItem(EMAIL)
    //                  * go to BEGIN
    //     * Send 'op=AUTO&value=BID'
    //	   * Receive one of:
    //           'EXPIRED BIT EKEYA EKEYB CTIME':
    //               go to EXPIRED
    //           'FAILED':  (means BID not recognized)
    //               go to AUTO_ID
    //		 'SHAKE HANDSHAKE':
    //               continue with following
    //     * Decrypt HANDSHAKE using KEYA and encrypt
    //       result using KEYB to get SHAKEHAND.
    //     * Send 'op=SHAKE&value=SHAKEHAND'
    //     * Receive one of:
    //           'FAILED':
    //               go to AUTO_ID
    //           'DONE NEXT_PAGE':
    //               continue with following
    //     * If MANUAL:
    //		* ITEM = 'BID KEYA KEYB CTIME'
    //          * localStorage.setItem(EMAIL,ITEM)
    //     * Issue GET to NEXT_PAGE
    
function email_keypress ( event )
{
    if ( event.code == 'Enter' )
    {
	email = document.getElementById("email").value.trim();
	if ( /^\S+@\S+\.\S+$/.test(email) )
	    EMAIL = email;
	else if ( email != '' )
	    alert ( email + " is not a valid email address" );
    }
}

function cnum_keypress ( event )
{
    if ( event.code == 'Enter' )
    {
	cnum = document.getElementById("cnum").value.trim();
	if ( /^[a-f0-9]{32}$/.test(cnum) )
	    CNUM = cunm;
	else if ( cunm != '' )
	    alert ( cunm + " is not a valid confirmation number" );
    }
}
    
</script>
</head>

<body>

<div id='get_email'>
<input onkeypress='email_keypress(event)' type='text'
       id='email' placeholder='Enter Email Address'>
<br><br>
<button onclick="store.clear()">Reset All Confirmations
</button><br>
(I.e., You must reconfirm all email address used with this browser.)
</div>

<div id='get_cnum' hidden>
<input onkeypress='cnum_keypress(event)' type='text'
       id='cnum' placeholder='Enter Confirmation Number'>
</div>
<br><br>
<button onclick="store.clear()">Reset All Confirmations
</button><br>
(I.e., You must reconfirm all email address used with this browser.)
</div>

<br>
<p><span id='current_action'></span></p>


</body>
</html>
