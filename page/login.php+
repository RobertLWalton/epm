<?php

    // File:	login.php
    // Author:	Robert L Walton <walton@acm.org>
    // Date:	Wed Jan  1 01:04:58 EST 2020

    // Handles login for a session.  Sets $_SESSION:
    //
    //    EPM_BROWSER_ID
    //	      This is set after browser identification
    //        protocol is complete.
    //    EPM_LOGIN_TIME
    //        This is the time EPM_BROWSER_ID is set.
    //    EPM_USER_ID
    //	      This is set for returning (non-new) users
    //	      after browser identification protocol is
    //	      complete.  For new users, it must is set
    //	      by page/user_edit.php instead.  If set it
    //	      is a non-zero natural number (1, 2, ... ).
    //    EPM_BROWSER_DATA
    //	      This is set during browser identification
    //	      protocol and unset after finish of
    //        protocol.  It is an array with keys:
    //
    //		browser_id => proposed value for
    //			      EPM_BROWSER_ID
    //
    //		email => email address from protocol or
    //			 admin/browser/BROWSER-ID file.
    //
    //		ctime => confirmation time from protocol
    //			 or admin/browser/BROWSER-ID
    //			 file.
    //
    //		keyA => keyA from protocol or
    //			admin/browser/BROWSER-ID file.
    //
    //		keyB => keyB from protocol or
    //			admin/browser/BROWSER-ID file.
    //
    //		cnumber => confirmation number for
    //			   protocol if needed.
    //
    //
    // After broswer identification, the file
    //
    //		admin/browser/BROWSER-ID
    //
    // is set a the line of single space separated
    // fields of the form:
    //
    //	    email ctime keyA keyB
    //
    // and $_SESSION['EPM_BROWSER_DATA'] is unset.
    //
    // Keys, browser IDs, cnumbers are 32 digit hex
    // numbers with high order zero padding.  Times are
    // in '%FT%T%z' (ISO 8601) format.
    //
    // Confirmation attempts and auto-logins are logged
    // to the file
    //
    //		admin/login.log
    //
    // if that file exists and is writeable. The file
    // format is CVS with:
    //
    //	   *,comment
    //	   browser-id,email,user-id,ipaddr,\
    //                login_time,ctime
    //
    // Ctime is '' if browser-identification failed,
    // and is taken from admin/browser/BROWSER-ID file
    // for auto-login.  Each confirmation attempt or
    // auto-login is logged separately.


    // Browser Identification Protocol
    // -------------------------------
    //
    // The browser runs the protocol using javascript
    // XMLHttpRequest to POST requests.  When the
    // browser is notified of success, it is given
    // a page to go to (page/problem_select.php or
    // for new users page/user_edit.php).
    //
    // The protocol is:
    //
    //     * Get email address EMAIL from user.
    //	   * Let ITEM = localStorage.getItem('EMAIL')
    //	   * If ITEM != null, goto AUTO_ID
    // MANUAL_ID:
    //     * Send 'op=MANUAL&value=EMAIL'
    //     * Receive 'NEW bid ekeyA ekeyB ctime' where
    //       bid is new browser ID, ekeyA is encrypted
    //       keyA and ekeyB is encrypted keyB, and ctime
    //       is the confirmation time (see below).
    // EXPIRED:
    //     * Get confirmation number from user.
    //     * Decrypt ekeyA and ekeyB using confirmation
    //       number as key.
    //	   * ITEM = 'bid keyA keyB ctime'
    //     * localStorage.setItem('EMAIL',ITEM)
    // AUTO_ID:
    //     * Parse ITEM to get bid, keyA, keyB.
    //     * Send 'op=AUTO&value=bid'
    //	   * Receive 'SHAKE handshake' or 'NEW bid ...'.
    //       If NEW, auto-id has expired, so go to
    //       EXPIRED using new bid, etc.
    //     * Decrypt handshake using keyA and encrypt
    //       result using keyB to get shakehand.
    //     * Send 'op=SHAKE&value=shakehand'
    //     * Receive 'DONE' on success, 'FAIL' on
    //       failure.  On failure go to MANUAL_ID.
    //
    // The server generates bid, keyA, keyB, confirma-
    // tion number and handshake as 128-bit binary
    // strings.  Encrypted values are binary strings.
    // Binary strings are transmitted as hexadecimal
    // strings.  Ctime is the time that the browser was
    // last confirmed, or the time the server receives
    // the MANUAL post, and is in '%FT%T%z' (ISO 8601)
    // format.  The browser does not use it in the
    // protocol.
    //
    // Encryption is by AES-128-CRC with zero initial
    // vector.  All encrypted items are 128 bit random
    // numbers.
    //
    // Multiple invocations of MANUAL for the same
    // session with the same EMAIL will use the same
    // cnumber, so as not to confuse the user.

    require "{$_SERVER['DOCUMENT_ROOT']}/index.php";
    umask ( 07 );

    // require "$include/debug_info.php";


TBD

    // Data set by GET and POST requests.
    //
    $method = $_SERVER["REQUEST_METHOD"];
    $email = NULL;
        // User must be asked for an email address iff
	// this remains NULL.
    if ( isset ( $_SESSION['epm_email'] ) )
        $email = $_SESSION['epm_email'];
    $bad_email = NULL;
        // If this becomes non-NULL, it is a user given
	// email address that is rejected.
    $confirmation_time = NULL;
        // User must be asked for confirmation number,
	// or must be auto-confirmed, if this remains
	// NULL and email is not NULL.  This must be
	// NULL if email is NULL.
    if ( isset ( $_SESSION['epm_confirmation_time'] ) )
        $confirmation_time =
	    $_SESSION['epm_confirmation_time'];
    $bad_confirm = false;
        // If this becomes true, confirmation number
	// given by the user was invalid, and new number
	// must be asked for.
    $userid = NULL;
        // This is set when userid is found using email
	// address.  For new users, it is never set
	// (it will be set by user_edit.php).
	// This must be NULL if $email is NULL.
	//
	// NOTE: setting this does NOT set $_SESSION
	// ['epm_userid'], which is not set until
	// after confirmation.
    if ( isset ( $_SESSION['epm_userid'] ) )
        $userid = $_SESSION['epm_userid'];
    $user_admin = NULL;
        // User admin parameters if they exist.
	// Is NULL if $userid is NULL.

    // Set userid and $user_admin according to $email.
    // Does nothing for new user.  
    //
    function set_userid()
    {
        global $email, $epm_data, $userid, $user_admin,
	       $include;

	$f = "admin/email_index/$email";
	if ( is_readable ( "$epm_data/$f" ) )
	{
	    $u = file_get_contents ( "$epm_data/$f" );
	    $u = trim ( $u );
	        // In case $f was edited by hand and a
		// \n was introduced.
	    if ( ! preg_match
		      ( '/^[1-9][0-9]*$/', $u ) )
	    {
		$sysfail = "$f has value $u";
		require "$include/sysalert.php";
	    }
	    $userid = $u;
	    $f = "admin/user{$userid}.info";
	    if ( is_readable ( "$epm_data/$f" ) )
		$user_admin =
		    get_json ( $epm_data, $f );
	}
    }

    // Log confirmation attempt or auto-confirmation.
    //
    function log_confirmation()
    {
    	global $confirmation_time, $email, $epm_data,
	       $include;

	$date_format = "%FT%T%z";

	$f = "admin/login.log";
	if ( is_writable ( "$epm_data/$f" ) )
	{
	    $desc = fopen ( "$epm_data/$f", 'a' );
	    if ( $desc === false )
	    {
		$sysfail =
		    "cannot append to writable $f";
		require "$include/sysalert.php";
	    }
	    $ipaddr = $_SESSION['epm_ipaddr'];
	    $log_login_time =
		strftime ( $date_format,
			   $_SESSION
			     ['epm_login_time'] );
	    if ( isset ( $confirmation_time ) )
		$log_confirmation_time = strftime
		    ( $date_format,
		      $confirmation_time );
	    else
		$log_confirmation_time = 'FAILED';
	    fputcsv
		( $desc,
		  [ $email,
		    $ipaddr,
		    $log_login_time,
		    $log_confirmation_time ] );
	    fclose ( $desc );
	}
    }

    if ( $method == 'GET' )
    {
        // Users is trying to initiate or continue
	// login.
	//
	if ( isset ( $userid ) )
	{
	    header ( "Location: problem.php" );
	    exit;
	}
	elseif ( isset ( $confirmation_time ) )
	{
	    header ( "Location: user_edit.php" );
	    exit;
	}
	// else fall through to continue login.
    }

    elseif ( $method != 'POST' )
        exit ( 'UNACCEPTABLE HTTP METHOD ' . $method );

    elseif ( isset ( $confirmation_time ) )
        exit ( 'UNACCEPTABLE HTTP POST' );

    elseif ( isset ( $userid ) )
        exit ( 'UNACCEPTABLE HTTP POST' );

    elseif ( isset ( $_POST['email'] ) )
    {
	// User answer to request for email address.
	// May be request to change email.

	$new_email = trim ( $_POST['email'] );
	$e = filter_var
	    ( $new_email, FILTER_SANITIZE_EMAIL );

	if ( $new_email == "" ) /* Do nothing */;
	    // "" sent by by user typing just
	    // carriage return.
	else if ( $e != $new_email )
	    $bad_email = $new_email;
	else if ( ! filter_var
		      ( $new_email,
			FILTER_VALIDATE_EMAIL ) )
	    $bad_email = $new_email;
	else
	{
	    $email = $e;
	    $_SESSION['epm_email'] = $email;
	    $userid = NULL;
	    $user_admin = NULL;
	    set_userid();
	}
    }
    else if ( isset ( $_POST['confirm_tag'] ) )
    {
	if ( ! isset ( $email ) )
	    exit ( 'UNACCEPTABLE HTTP POST' );
	elseif (    $_SESSION['confirm_tag']
		  == $_POST['confirm_tag'] )
	{
	    $confirmation_time = time();
	    $_SESSION['epm_confirmation_time'] =
		$confirmation_time;
	}
	else
	    $bad_confirm = true;

	log_confirmation();
    }

    if (    isset ( $confirmation_time )
         && isset ( $user_admin ) )
    {
        // Record current time as last confirmation
	// time for the user and ip address.
	//
	$ipaddr = $_SESSION['epm_ipaddr'];
	$user_admin['confirmation_time'][$ipaddr] =
	    strftime ( '%FT%T%z', $confirmation_time );
	$j = json_encode
	    ( $user_admin, JSON_PRETTY_PRINT );
	$f = "admin/user{$userid}.info";
	$r = file_put_contents ( "$epm_data/$f", $j );
	if ( $r === false )
	{
	    $sysfail = "cannot write $f";
	    require "$include/sysalert.php";
	}
    }

    // This must be done after recording confirmation_
    // time as it may set $confirmation_time to an old
    // value.
    //
    if (    ! isset ( $confirmation_time )
         && isset ( $user_admin ) )
    {
	// Check if we can auto-confirm for this
	// user and ip address.
	//
	$ipaddr = $_SESSION['epm_ipaddr'];
	if ( isset ( $user_admin['confirmation_time']
	                        [$ipaddr] ) )
	{
	    $ctime = strtotime
		( $user_admin['confirmation_time']
		             [$ipaddr] );
	    if (   time()
	         < $ctime + $confirmation_interval )
	    {
	        $confirmation_time = $ctime;
		$_SESSION['epm_confirmation_time'] =
		    $confirmation_time;
		log_confirmation();
	    }
	}
    }

    if ( isset ( $confirmation_time ) )
    {
	if ( ! isset ( $userid ) )
	    header ( "Location: user_edit.php" );
	else
	{
	    if ( isset ( $userid ) )
	        $_SESSION['epm_userid'] = $userid;
	    header ( "Location: problem.php" );
	}
	exit;
    }
    else if ( isset ( $email ) )
	$_SESSION['confirm_tag'] =
	    bin2hex ( random_bytes ( 8 ) );

?>

<html>
<body>


<?php 

    $begin_form =
	"<form method='post' action='login.php';>";
    $end_form = "</form>";

    if ( ! isset ( $email ) )
    {
	// Ask for Email Address.
	//
	if ( isset ( $bad_email ) )
	{
	    $e = htmlspecialchars ( $bad_email );
	    echo "<mark>EMAIL ADDRESS $e WAS" .
		 " MALFORMED; TRY AGAIN</mark>" .
		 "<br>";
	}

	echo $begin_form;
	echo "Enter:&nbsp;<input type='email'" .
	     " name='email'" .
	     " placeholder='Email Address'>";
	echo $end_form;
    }
    else
    {
	// Ask for Confirmation Number
	//.
	if ( $bad_confirm )
	{
	    echo '<mark>CONFIRMATION NUMBER WAS' .
		 ' WRONG; TRY AGAIN</mark><br>';
	    echo 'A <mark>new</mark>';
	}
	else
	    echo 'A';

	echo ' confirmation number has been mailed'
	     . ' to your email address.<br><br>';
	echo "Email Address: $email" .
	     "&nbsp;&nbsp;/&nbsp;&nbsp;";
	echo "IP Address: {$_SESSION['epm_ipaddr']}" .
	     "<br><br>";
	echo $begin_form;
	echo "Enter:&nbsp;<input type='text'" .
	     " name='confirm_tag'" .
	     " placeholder='Confirmation Number'>";
	echo $end_form;
	echo $begin_form;
	echo "Or Enter:&nbsp;<input type='email'" .
	     " name='email'" .
	     " placeholder='New Email Address'>";
	echo $end_form;
	echo '<br>Confirmation Number is ' . 
	     $_SESSION["confirm_tag"];

    }
?>

</body>
</html>
